"""."""


# packages
import pandas
import sqlite3

# custom functions
from lib.sql_functions.sql_to_pd import sql_to_pd
from lib.sql_functions.fetchall import fetchall
from lib.sql_functions.commit import commit
from lib.plot_functions.plot_corr import plot_corr
from lib.plot_functions.plot_class_dist import plot_class_dist
from lib.plot_functions.plot_univar_dist import plot_univar_dist


# want to know how the data looks so a quick exploration of the data is done.

# get table information
database = 'database/transactions.db'
table = 'labelled'
query = 'PRAGMA table_info([{}])'.format(table)
table_info = fetchall(database=database, query=query)

# count number of records in table
query = 'SELECT COUNT(*) FROM {}'.format(table)
record_count = fetchall(database=database, query=query)

# show first n rows of table
n = 10
query = 'SELECT * FROM %s LIMIT %s' % (table, n)
head = pandas.read_sql(con=sqlite3.connect(database), sql=query)
# most columns are anonymised

# first row of table must be deleted as it is a row of columns names, not data
columnid = 'Transaction_id'
rowid = '1'
query = 'DELETE FROM %s WHERE %s = %s' % (table, columnid, rowid)
commit(database=database, query=query)


# import and preprocess data

# import data from sql table
query = 'SELECT * FROM {}'.format(table)
labelled_data = sql_to_pd(database, query)

# Transaction_id is generated by sql and offers no information. Time is not
# used in the generative models so is not used for model training either.
labelled_data = labelled_data.drop(['Transaction_id', 'Time'], axis=1)

# check for missing values
labelled_data.isnull().sum()
# no missing values


# explore data to see if any dimensionality reduction of transformations
# need to be done.

# plot correlation matrix
plot_corr(labelled_data)  # no strong correlations

# plot class distribution
plot_class_dist(data=labelled_data, column='Class', labl_a=0, labl_b=1)
# Very imbalanced class distribution

# plot univariate distributions of predictors, split by class
columns = labelled_data.columns
for i in columns:
    plot_univar_dist(data=labelled_data,
                     column=i,
                     class_col='Class',
                     labl_a=0,
                     labl_b=1,
                     bins=80,
                     log=False
                     )
    print(i)
# Amount column needs to be log transformed. Fraud transactions hi variance.

# Log transform and plot Amount column
plot_univar_dist(data=labelled_data,
                 column='Amount',
                 class_col='Class',
                 labl_a=0,
                 labl_b=1,
                 bins=80,
                 log=True
                 )

# Get mean and standard deviation for each class in the Amount feature
labelled_data['Amount'].loc[labelled_data['Class'] == 0].mean()
labelled_data['Amount'].loc[labelled_data['Class'] == 1].mean()
labelled_data['Amount'].loc[labelled_data['Class'] == 0].std()
labelled_data['Amount'].loc[labelled_data['Class'] == 1].std()
